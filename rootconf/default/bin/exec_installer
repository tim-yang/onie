#!/bin/sh

. /lib/onie/functions
syslog_tag=onie-exec

run_installer()
{
    [ -r $onie_installer ] || {
        log_failure_msg "Unable to find installer: $onie_installer"
        return 1
    }

    export onie_exec_url="$1"
    # escape any % characters for printing with printf
    print_exec_url=$(echo -n $onie_exec_url | sed -e 's/%/%%/g')
    log_console_msg "Executing installer: $print_exec_url"
    if [ "$onie_boot_reason" = "update" -o "$onie_boot_reason" = "embed" ] ; then
        grep -q ONIE-UPDATER-COOKIE $onie_installer || {
            log_failure_msg "ONIE Updater:  Invalid ONIE update image format."
            return 1
        }
    fi

    chmod +x $onie_installer
    # Send installer execution output to stdout or /dev/console
    tee_path="$(realpath "/proc/$$/fd/1" 2>/dev/null)"
    if [ "$tee_path" = "/dev/null" ] || [ -z "$tee_path" ] ; then
        tee_path=/dev/console
    fi
    { $onie_installer; echo "$?" > /var/run/install.rc; } 2>&1 | tee $tee_path | logger $log_stderr -t os-install -p ${syslog_onie}.info
    [ "$(cat /var/run/install.rc)" = "0" ] && reboot && return 0

    # installer should not return
    return 1
}

# wget HTTP/FTP download helper
wget_run()
{
    type=$1
    URL="$2"

    wget_args="-T 3 -O $onie_installer"

    if [ "$onie_verbose" = "y" ] || [ "$from_cli" = "yes" ] ; then
        out_file="/proc/$$/fd/1"
    else
        wget_args="$wget_args -q"
        out_file="/dev/null"
    fi

    # add HTTP headers
    # Shell variable substituion
    bb_ver=$(busybox | head -1 | sed -e 's/ (.*//' -e 's/ /-/')
    os_ver=$(uname -r -s | sed -e 's/ /-/')
    user_agent="-U onie/1.0 ($os_ver; $bb_ver)"

    header_serial_num="ONIE-SERIAL-NUMBER: $onie_serial_num"
    header_eth_addr="ONIE-ETH-ADDR: $onie_eth_addr"
    header_vendor_id="ONIE-VENDOR-ID: $onie_vendor_id"
    header_machine="ONIE-MACHINE: $onie_machine"
    header_machine_rev="ONIE-MACHINE-REV: $onie_machine_rev"
    header_arch="ONIE-ARCH: $onie_arch"
    header_security_key="ONIE-SECURITY-KEY: $onie_sec_key"
    header_operation="ONIE-OPERATION: $onie_operation"

    log_debug_msg "Running wget with: $user_agent $wget_args $URL\n"
    log_info_msg "Fetching $URL ..."
    wget "$user_agent" $wget_args       \
        --header "$header_serial_num"   \
        --header "$header_eth_addr"     \
        --header "$header_vendor_id"    \
        --header "$header_machine"      \
        --header "$header_machine_rev"  \
        --header "$header_arch"         \
        --header "$header_security_key" \
        --header "$header_operation"    \
        "$URL" > $out_file 2>&1 && run_installer "$URL" && return 0

    return 1
}

# tftp_wrap -- A wrapper around busybox's tftp command that on error
# inspects the stderr output looking for a timeout.
tftp_timeout=no
tftp_wrap()
{
    tftp_timeout=no

    # capture tftp command output
    tftp_tmpout=$(mktemp)
    tftp $* > $tftp_tmpout 2>&1 
    rc=$?

    # on error check for timeout
    if [ "$rc" != "0" ] ; then
        grep -q timeout $tftp_tmpout && {
            tftp_timeout=yes
        }
    fi

    # return output to caller
    cat $tftp_tmpout
    rm -f $tftp_tmpout

    return $rc
}

# TFTP download helper
tftp_run()
{
    SERVER=$1
    BOOTFILE=$2

    URL="tftp://$SERVER/$BOOTFILE"
    log_debug_msg "Running tftp get with: server: $SERVER, bootfile: $BOOTFILE"
    log_info_msg "Fetching $URL ..."
    if [ "$onie_verbose" = "y" ] || [ "$from_cli" = "yes" ] ; then
        tftp_wrap -g -l $onie_installer -r $BOOTFILE $SERVER && run_installer "$URL" && return 0
    else
        tftp_wrap -g -l $onie_installer -r $BOOTFILE $SERVER > /dev/null 2>&1 && run_installer "$URL" && return 0
    fi

    return 1
}

# Try possible URL handlers
# URL could be:
#   http://
#   ftp://
#   file://
#   tftp://
url_run()
{
    URL="$1"
    quiet=$2
    url_type=${URL%%:*}
    url_path=${URL##*://}
    rm -f $onie_installer
    case $url_type in
        http | https | ftp)
            wget_run $url_type "$URL" && return 0
            ;;
        tftp)
            server=${url_path%%/*}
            path=${url_path#*/}
            tftp_run $server $path && return 0
            ;;
        file)
            cp $url_path $onie_installer && run_installer "$URL" && return 0
            ;;
        *)
            # First see if "$URL" refers a local file
            if [ -r "$URL" ] ; then
                cp $URL $onie_installer && run_installer "$URL" && return 0
                return 1
            fi
            [ -n "$quiet" ] || log_failure_msg "Unknown URL type: $URL"
            ;;
    esac

    return 1
}

# Try various HTTP URLs
http_download()
{
    # Build list of HTTP servers to try
    http_servers=

    # HTTP server IP only
    if [ -n "$onie_disco_wwwsrv" ] ; then
        http_servers="$http_servers $onie_disco_wwwsrv"
    fi

    # Try BOOTP next-server IP as HTTP
    if [ -n "$onie_disco_siaddr" ] ; then
        http_servers="$http_servers $onie_disco_siaddr"
    fi

    # Try DHCP server IP as HTTP
    if [ -n "$onie_disco_serverid" ] ; then
        http_servers="$http_servers $onie_disco_serverid"
    fi

    # Add link local neighbors
    while [ ${#onie_neighs} -gt 0 ] ; do
        n=${onie_neighs%%,*}
        onie_neighs=${onie_neighs#*,}
        tmp=$(echo $n | sed -e 's/-/%/g');
        http_servers="$http_servers $tmp"
    done

    # make list items unique, while preserving list order
    ulist=$({ cnt=0; for s in $http_servers ; do printf "%d\t%s\n" $cnt $s ; cnt=$(( $cnt + 1 )) ; done ; } | \
        sort -u -k2 | sort -n | cut -f2-)
    for server in $ulist ; do
        # Check if server appears to be alive
        nc -w 10 $server 80 -e /bin/true > /dev/null 2>&1 && {
            # Try list of default file names
            for f in $onie_default_filenames ; do
                url_run "http://$server/$f" && return 0
            done
        }
    done

    # Try bootfile as a URL, supress warnings
    if [ -n "$onie_disco_bootfile" ] ; then
        url_run "$onie_disco_bootfile" quiet && return 0
    fi

    return 1
}

tftp_download()
{
    # Try BOOTP next-server and bootfile
    if [ -n "$onie_disco_siaddr" ] && [ -n "$onie_disco_bootfile" ] ; then
        url_run "tftp://$onie_disco_siaddr/$onie_disco_bootfile" && return 0
    fi

    # Try DHCP TFTP server name (opt 66) and bootfile (opt 67)
    # Requires DNS
    if [ -n "$onie_disco_tftp" ] && [ -n "$onie_disco_bootfile" ] ; then
        url_run "tftp://$onie_disco_tftp/$onie_disco_bootfile" && return 0
    fi

    return 1
}

waterfall()
{
    # Build list of waterfall paths

    wf_paths=
    # First is based on MAC address
    [ -n "$onie_eth_addr" ] && wf_paths="$(echo $onie_eth_addr | sed -e 's/:/-/g')/$onie_default_filename"

    if [ -n "$onie_disco_ip" ] ; then
        # Next 8 are based on IP address in HEX:
        tmp=$(echo $onie_disco_ip | sed -e 's/\./ /g')
        cmd="printf %02X%02X%02X%02X $tmp"
        wf_ip=$(eval $cmd)
        len=8
        while [ $len -gt 0 ] ; do
            wf_paths="$wf_paths $(echo $wf_ip | head -c $len)/$onie_default_filename"
            len=$(( $len - 1 ))
        done
    fi

    # Next is root of tftp server -- try all default filenames
    wf_paths="$wf_paths $onie_default_filenames"

    # TFTP waterfall
    tftp_servers="$onie_disco_siaddr $onie_disco_tftp"
    for s in $tftp_servers ; do
        for p in $wf_paths ; do
            url_run "tftp://$s/$p" && return 0
            if [ "$tftp_timeout" = "yes" ] ; then
                # Stop TFTP waterfall on a timeout.
                break;
            fi
        done
    done

    return 1
}

local_fs_run()
{
    mp=$(mktemp -d)
    while [ ${#onie_local_parts} -gt 0 ] ; do
        p=${onie_local_parts%%,*}
        onie_local_parts=${onie_local_parts#*,}
        mount $p $mp > /dev/null 2>&1 && {
            for f in $onie_default_filenames ; do
                if [ -r $mp/$f ] ; then
                    # copy to /tmp, which is a tmpfs -- installer needs to
                    # run with everything unmounted.
                    tmp_copy=$(mktemp -p /tmp)
                    cp $mp/$f $tmp_copy || {
                        log_failure_msg "local_fs_run():$p Unable to copy $mp/$f to tmpfs"
                        rm -f $tmp_copy
                        return 1
                    }
                    sync ; sync
                    umount $p
                    ln -sf $tmp_copy $onie_installer || {
                        log_failure_msg "local_fs_run():$p Unable to make symlink to $onie_installer in tmpfs"
                        rm -f $tmp_copy
                        return 1
                    }
                    run_installer "file:/$p/$f" && return 0
                    rm -f $tmp_copy $onie_installer
                    # re-mount it to look for more files
                    mount $p $mp > /dev/null 2>&1
                fi
            done
            umount $p
        }
    done
    rm -rf $mp

    return 1
}

##
## Script starts here
##

parm_file="$1"
[ -r $parm_file ] || {
    log_failure_msg "Unable to read parameter file: $parm_file"
    log_console_msg "FATAL: Unable to read parameter file: $parm_file"
    exit 1
}
parms="$(cat $parm_file)"

import_parms "$parms"
rm -f $onie_installer

[ -z "$onie_eth_addr" ] && onie_eth_addr="$(onie-sysinfo -e)"

from_cli=no

# Try static installer URL from CLI
if [ -n "$onie_cli_static_url" ] ; then
    from_cli=yes
    # also send to stdout of current process
    tee_log_file=/proc/$$/fd/1
    url_run "$onie_cli_static_url" && exit 0
    # stop here if it didn't work
    exit 1
fi

# Try static updater URL from CLI
if [ -n "$onie_cli_static_update_url" ] ; then
    from_cli=yes
    # also send to stdout of current process
    tee_log_file=/proc/$$/fd/1
    url_run "$onie_cli_static_update_url" && exit 0
    # stop here if it didn't work
    exit 1
fi

# Next try static URL from u-boot
if [ -n "$onie_static_url" ] ; then
    url_run "$onie_static_url" && exit 0
fi

# Next try locally attached filesystems
if [ -n "$onie_local_parts" ] ; then
    local_fs_run && exit 0
fi

# Next try exactly discovered URLs
if [ -n "$onie_disco_onie_url" ] ; then
    url_run "$onie_disco_onie_url" && exit 0
fi

if [ -n "$onie_disco_url" ] ; then
    url_run "$onie_disco_url" && exit 0
fi

# Try HTTP discovery methods next
http_download && {
    echo "http success, exiting..."
    exit 0
}

# Try TFTP discovery methods next
tftp_download && {
    echo "tftp success, exiting..."
    exit 0
}

# Finally try HTTP/TFTP waterfall methods
waterfall && {
    echo "waterfall success, exiting..."
    exit 0
}

exit 1

# Local Variables:
# mode: shell-script
# eval: (sh-set-shell "/bin/sh" t nil)
# End:
