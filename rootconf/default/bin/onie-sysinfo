#!/bin/sh

this_script=$(basename $(realpath $0))
lib_dir="$(dirname $(realpath $0))/../lib/onie"
[ -r "$lib_dir/functions" ] || {
    echo "ERROR: Unable to find onie functions:$lib_dir/functions"
    exit 1
}
. $lib_dir/functions

# Determine the board serial number.  Check a number of methods in
# order:
#
# 1. is it set in the environment?  highest priority
# 2. platform function provided
# 3. architecture function provided
# 4. return 'unknown'

get_serial_num()
{
    if [ -z "$serial_num" ] ; then
        if type get_serial_num_platform | grep -q 'shell function' > /dev/null 2>&1 ; then
            serial_num=$(get_serial_num_platform)
        elif type get_serial_num_arch | grep -q 'shell function' > /dev/null 2>&1 ; then
                serial_num=$(get_serial_num_arch)
        fi
    fi

    if [ -n "$serial_num" ] ; then
        echo $serial_num
    else
        echo "Unknown"
    fi
}


# Determine the first MAC address, typically used for eth0.  Check a
# number of methods in order:
#
# 1. is it set in the environment?  highest priority
# 2. platform function provided
# 3. architecture function provided
# 4. use the contents of /sys/class/net/eth0/address
# 5. return 'unknown'

get_ethaddr()
{

    if [ -n "$onie_eth_addr" ] ; then
        eth_addr="$onie_eth_addr"
    fi
    if [ -z "$eth_addr" ] ; then
        if type get_ethaddr_platform | grep -q 'shell function' > /dev/null 2>&1 ; then
            eth_addr=$(get_ethaddr_platform)
        elif type get_ethaddr_arch | grep -q 'shell function' > /dev/null 2>&1 ; then
            eth_addr=$(get_ethaddr_arch)
        elif [ -r /sys/class/net/eth0/address ] ; then
            # Print Ethernet address from eth0 interface
            eth_addr=$(cat /sys/class/net/eth0/address)
        fi
    fi

    if [ -n "$eth_addr" ] ; then
        echo $eth_addr
    else
        echo "Unknown"
    fi

}

[ -r $lib_dir/sysinfo-arch ]     && . $lib_dir/sysinfo-arch
[ -r $lib_dir/sysinfo-platform ] && . $lib_dir/sysinfo-platform

args="sevimrpcfdat"

usage()
{
    echo "$(basename $0) [-${args}]"
    cat <<EOF
Dump ONIE system information.

COMMAND LINE OPTIONS

	The default is to dump the ONIE platform (-p).

	-h
		Help.  Print this message.

	-s
		Serial Number

	-e
		Management Ethernet MAC address

	-v
		ONIE version string

	-i
		ONIE vendor ID.  Print the ONIE vendor's IANA enterprise number.

	-m
		ONIE machine string

	-r
		ONIE machine revision string

	-p
		ONIE platform string.  This is the default.

	-c
		ONIE CPU architecture

	-f
		ONIE configuration version

	-d
		ONIE build date

	-t
		ONIE partition type

	-a
		Dump all information.
EOF
}

sn=no
mac=no
version=no
vendor_id=no
machine=no
machine_rev=no
platform=no
arch=no
config_version=no
build_date=no
partition_type=no
all=no

[ $# -eq 0 ] && platform=yes

while getopts "$args" a ; do
    case $a in
        h)
            usage
            exit 0
            ;;
        s)
            sn=yes
            ;;
        e)
            mac=yes
            ;;
        v)
            version=yes
            ;;
        i)
            vendor_id=yes
            ;;
        m)
            machine=yes
            ;;
        r)
            machine_rev=yes
            ;;
        p)
            platform=yes
            ;;
        c)
            arch=yes
            ;;
        f)
            config_version=yes
            ;;
        d)
            build_date=yes
            ;;
        t)
            partition_type=yes
            ;;
        a)
            all=yes
            ;;
        *)
            echo "Unknown argument: $a"
            usage
            exit 1
    esac
done

count=1
print_val()
{
    if [ $count -gt 1 ] ; then
        echo -n " "
    fi
    if [ -n "$1" ] ; then
        echo -n "$1"
    else
        echo -n "unknown"
    fi
    count=$(( $count + 1 ))
}

if [ "$sn" = "yes" ] || [ "$all" = "yes" ] ; then
    val=$(get_serial_num)
    print_val $val
fi

if [ "$mac" = "yes" ] || [ "$all" = "yes" ] ; then
    val=$(get_ethaddr)
    print_val $val
fi

for v in version vendor_id machine machine_rev platform arch config_version partition_type build_date ; do
    eval dump='$'$v
    if [ "$dump" = "yes" ] || [ "$all" = "yes" ] ; then
        eval val='$onie'_$v
        print_val $val
    fi
done

echo
